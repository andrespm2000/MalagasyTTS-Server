## Dockerfile para un entorno de desarrollo con GPU utilizando NVIDIA CUDA y Anaconda
FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

## Variables de entorno
ENV PYTHONUNBUFFERED=1

## Actualiza el sistema y instala las dependencias necesarias
RUN apt-get update --yes --quiet && DEBIAN_FRONTEND=noninteractive apt-get install --yes --quiet --no-install-recommends software-properties-common build-essential apt-utils wget curl vim git ca-certificates kmod nvidia-driver-525 && rm -rf /var/lib/apt/lists/*

## Instala Python 3.10 y pip
RUN add-apt-repository --yes ppa:deadsnakes/ppa && apt-get update --yes --quiet
RUN DEBIAN_FRONTEND=noninteractive apt-get install --yes --quiet --no-install-recommends python3.10 python3.10-dev python3.10-distutils python3.10-lib2to3 python3.10-gdbm python3.10-tk pip

## Configura Python 3.10 como la versión por defecto
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 999 && update-alternatives --config python3 && ln -s /usr/bin/python3 /usr/bin/python

## Actualiza pip a la última versión
RUN pip install --upgrade pip

## Instala Anaconda y configura el entorno de Conda
RUN wget -O /tmp/anaconda.sh https://repo.anaconda.com/archive/Anaconda3-2022.10-Linux-x86_64.sh && bash /tmp/anaconda.sh -b -p /anaconda && eval "$(/anaconda/bin/conda shell.bash hook)" && conda init && conda update -n base -c defaults conda && conda create --name env && conda activate env && conda install -y pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch-nightly -c nvidia

## Establece el directorio de trabajo dentro del contenedor
WORKDIR /app

## Copia los archivos necesarios al contenedor
COPY requirements.txt .
COPY main.py .
COPY detection.py .
COPY translation.py .
COPY narration.py .

##Instala las dependencias
RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 8000

##Comando que se ejecutará cuando el contenedor inicie
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
